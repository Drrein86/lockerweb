<!DOCTYPE html>
<html dir="rtl" lang="he">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>🔐 סימולטור לוקר חכם</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            direction: rtl;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
        }
        .status {
            text-align: center;
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
            font-size: 18px;
            font-weight: bold;
        }
        .connected {
            background: rgba(76, 175, 80, 0.3);
            border: 2px solid #4caf50;
        }
        .disconnected {
            background: rgba(244, 67, 54, 0.3);
            border: 2px solid #f44336;
        }
        .locker-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }
        .cell {
            background: rgba(255, 255, 255, 0.2);
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 10px;
            padding: 20px;
            text-align: center;
            transition: all 0.3s ease;
            cursor: pointer;
        }
        .cell:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-5px);
        }
        .cell.opening {
            background: rgba(255, 193, 7, 0.6);
            border-color: #ffc107;
            animation: pulse 1s infinite;
        }
        .cell.open {
            background: rgba(76, 175, 80, 0.6);
            border-color: #4caf50;
        }
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        .controls {
            text-align: center;
            margin-bottom: 20px;
        }
        .btn {
            background: rgba(255, 255, 255, 0.2);
            border: 2px solid rgba(255, 255, 255, 0.3);
            color: white;
            padding: 10px 20px;
            border-radius: 25px;
            cursor: pointer;
            margin: 0 10px;
            font-size: 16px;
            transition: all 0.3s ease;
        }
        .btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }
        .log {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 10px;
            padding: 15px;
            max-height: 200px;
            overflow-y: auto;
            font-family: monospace;
            font-size: 14px;
            margin-top: 20px;
        }
        .log-entry {
            margin-bottom: 5px;
            padding: 3px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 style="text-align: center; margin-bottom: 30px; font-size: 2.5em;">
            🔐 סימולטור לוקר חכם
        </h1>
        
        <div id="status" class="status disconnected">
            🔴 לא מחובר לשרת
        </div>
        
        <div class="controls">
            <input type="number" id="lockerId" placeholder="מספר לוקר (1-3)" value="1" style="padding: 10px; border-radius: 10px; border: none; margin-left: 10px;">
            <button class="btn" onclick="connect()">🔗 התחבר</button>
            <button class="btn" onclick="disconnect()">❌ התנתק</button>
        </div>
        
        <h3 style="text-align: center;">תאי הלוקר:</h3>
        <div class="locker-grid" id="cellGrid">
            <!-- התאים ייווצרו ב-JavaScript -->
        </div>
        
        <div class="log" id="log">
            <div class="log-entry">📝 יומן פעילות:</div>
        </div>
    </div>

    <script>
        let ws = null;
        let lockerId = 1;
        const cells = ['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1', 'C2', 'C3', 'D1', 'D2', 'D3', 'E1', 'E2', 'E3'];
        
        // יצירת התאים
        function createCells() {
            const grid = document.getElementById('cellGrid');
            grid.innerHTML = '';
            
            cells.forEach(cellCode => {
                const cell = document.createElement('div');
                cell.className = 'cell';
                cell.innerHTML = `
                    <div style="font-size: 24px; margin-bottom: 10px;">🔒</div>
                    <div style="font-weight: bold;">${cellCode}</div>
                    <div style="font-size: 12px; margin-top: 5px;">סגור</div>
                `;
                cell.onclick = () => simulateOpen(cellCode);
                grid.appendChild(cell);
            });
        }
        
        // התחברות לשרת
        function connect() {
            lockerId = document.getElementById('lockerId').value || 1;
            
            // נסה להתחבר לשרת המקומי או לשרת production
            const wsUrl = window.location.hostname === 'localhost' 
                ? 'ws://localhost:8081' 
                : `wss://${window.location.hostname.replace('https://', '')}:8081`;
            
            try {
                ws = new WebSocket(wsUrl);
                
                ws.onopen = () => {
                    updateStatus('🟢 מחובר לשרת', true);
                    
                    // רישום הלוקר
                    ws.send(JSON.stringify({
                        type: 'register',
                        lockerId: parseInt(lockerId)
                    }));
                    
                    log(`🔗 התחבר לשרת כלוקר ${lockerId}`);
                };
                
                ws.onmessage = (event) => {
                    try {
                        const data = JSON.parse(event.data);
                        handleMessage(data);
                    } catch (error) {
                        log(`❌ שגיאה בפענוח הודעה: ${error.message}`);
                    }
                };
                
                ws.onclose = () => {
                    updateStatus('🔴 לא מחובר לשרת', false);
                    log('📡 החיבור נסגר');
                };
                
                ws.onerror = (error) => {
                    log(`❌ שגיאת חיבור: ${error.message || 'לא ניתן להתחבר לשרת'}`);
                    updateStatus('🔴 שגיאת חיבור', false);
                };
                
            } catch (error) {
                log(`❌ שגיאה ביצירת החיבור: ${error.message}`);
                updateStatus('🔴 שגיאת חיבור', false);
            }
        }
        
        // התנתקות
        function disconnect() {
            if (ws) {
                ws.close();
                ws = null;
            }
            updateStatus('🔴 לא מחובר לשרת', false);
            log('🔌 התנתקות ידנית');
        }
        
        // טיפול בהודעות מהשרת
        function handleMessage(data) {
            log(`📨 הודעה מהשרת: ${JSON.stringify(data, null, 2)}`);
            
            switch(data.type) {
                case 'registered':
                    log(`✅ לוקר ${data.lockerId} נרשם בהצלחה`);
                    break;
                    
                case 'openCell':
                    log(`🔓 פקודת פתיחה לתא ${data.cellCode}`);
                    openCell(data.cellCode);
                    break;
                    
                default:
                    log(`❓ הודעה לא מזוהה: ${data.type}`);
            }
        }
        
        // פתיחת תא (אנימציה)
        function openCell(cellCode) {
            const cells = document.querySelectorAll('.cell');
            
            cells.forEach(cell => {
                const cellCodeElement = cell.querySelector('div:nth-child(2)');
                if (cellCodeElement && cellCodeElement.textContent === cellCode) {
                    // אנימציית פתיחה
                    cell.classList.add('opening');
                    cell.innerHTML = `
                        <div style="font-size: 24px; margin-bottom: 10px;">🔓</div>
                        <div style="font-weight: bold;">${cellCode}</div>
                        <div style="font-size: 12px; margin-top: 5px;">פותח...</div>
                    `;
                    
                    // לאחר 2 שניות - תא פתוח
                    setTimeout(() => {
                        cell.classList.remove('opening');
                        cell.classList.add('open');
                        cell.innerHTML = `
                            <div style="font-size: 24px; margin-bottom: 10px;">🟢</div>
                            <div style="font-weight: bold;">${cellCode}</div>
                            <div style="font-size: 12px; margin-top: 5px;">פתוח!</div>
                        `;
                        
                        // לאחר 5 שניות - חזרה למצב סגור
                        setTimeout(() => {
                            cell.classList.remove('open');
                            cell.innerHTML = `
                                <div style="font-size: 24px; margin-bottom: 10px;">🔒</div>
                                <div style="font-weight: bold;">${cellCode}</div>
                                <div style="font-size: 12px; margin-top: 5px;">סגור</div>
                            `;
                            log(`🔒 תא ${cellCode} נסגר אוטומטית`);
                        }, 5000);
                        
                    }, 2000);
                    
                    break;
                }
            });
        }
        
        // סימולציה של פתיחה ידנית (לבדיקה)
        function simulateOpen(cellCode) {
            log(`🧪 סימולציה ידנית של פתיחת תא ${cellCode}`);
            openCell(cellCode);
        }
        
        // עדכון סטטוס
        function updateStatus(message, connected) {
            const status = document.getElementById('status');
            status.textContent = message;
            status.className = `status ${connected ? 'connected' : 'disconnected'}`;
        }
        
        // הוספת רשומה ליומן
        function log(message) {
            const logElement = document.getElementById('log');
            const entry = document.createElement('div');
            entry.className = 'log-entry';
            entry.textContent = `${new Date().toLocaleTimeString('he-IL')} - ${message}`;
            logElement.appendChild(entry);
            logElement.scrollTop = logElement.scrollHeight;
        }
        
        // אתחול הדף
        createCells();
        
        // התחברות אוטומטית בטעינת הדף
        setTimeout(() => {
            log('🚀 מנסה להתחבר אוטומטית...');
            connect();
        }, 1000);
    </script>
</body>
</html> 