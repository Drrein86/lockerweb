// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN      // אדמין - גישה מלאה
  MANAGEMENT // ניהול - גישה ניהולית מוגבלת
  COURIER    // שליח - גישה לדפי משלוחים
  BUSINESS   // עסק - גישה לדפי עסק
  CUSTOMER_SERVICE // שירות לקוחות - גישה מוגבלת
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_APPROVAL // ממתין לאישור אדמין
}

// מודל למשתמשים עם מערכת הרשאות מתקדמת
model User {
  id              Int                @id @default(autoincrement())
  email           String             @unique
  password        String             // סיסמא מוצפנת
  googleId        String?            @unique // Google OAuth ID (לעתיד)
  firstName       String
  lastName        String
  phone           String?
  profileImage    String?            // תמונת פרופיל
  role            UserRole
  status          UserStatus         @default(PENDING_APPROVAL)
  lastLoginAt     DateTime?
  isApproved      Boolean            @default(false) // האם אושר על ידי אדמין
  approvedBy      Int?               // מי אישר אותו
  approvedAt      DateTime?
  approver        User?              @relation("UserApprovals", fields: [approvedBy], references: [id])
  approvedUsers   User[]             @relation("UserApprovals")
  permissions     UserPermission[]   // הרשאות ספציפיות לדפים
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  
  // קשרים קיימים
  packages        Package[]
  deliveries      Delivery[]
  auditLogs       AuditLog[]
}

// מודל הרשאות לדפים ספציפיים
model UserPermission {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pageRoute   String   // נתיב הדף (למשל '/admin/lockers')
  canView     Boolean  @default(false) // האם יכול לצפות
  canEdit     Boolean  @default(false) // האם יכול לערוך
  canDelete   Boolean  @default(false) // האם יכול למחוק
  canCreate   Boolean  @default(false) // האם יכול ליצור
  description String?  // תיאור ההרשאה
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([userId, pageRoute]) // משתמש יכול להיות רק הרשאה אחת לכל דף
  @@index([pageRoute])
}

// מודל דפים במערכת להגדרת הרשאות
model SystemPage {
  id          Int      @id @default(autoincrement())
  route       String   @unique // נתיב הדף
  title       String   // כותרת הדף
  description String?  // תיאור הדף
  category    String   // קטגוריה (admin, courier, business וכו')
  isActive    Boolean  @default(true)
  requiresRole UserRole? // תפקיד מינימלי נדרש
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Customer {
  id            Int         @id @default(autoincrement())
  email         String      @unique
  firstName     String
  lastName      String
  phone         String
  address       String?
  packages      Package[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum LockerStatus {
  ONLINE
  OFFLINE
  MAINTENANCE
}

enum CellStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  LOCKED
  UNLOCKED
}

model Locker {
  id            Int         @id @default(autoincrement())
  name          String      // שם הלוקר
  location      String
  description   String?
  ip            String?     // כתובת IP של הלוקר
  port          Int?        // פורט התקשורת
  deviceId      String?     @unique // מזהה יחודי של הלוקר
  status        LockerStatus @default(OFFLINE)
  lastSeen      DateTime?   // חותמת זמן של חיבור אחרון
  isActive      Boolean     @default(true) // האם הלוקר פעיל
  cells         Cell[]
  packages      Package[]
  lockerState   LockerState?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Cell {
  id            Int         @id @default(autoincrement())
  cellNumber    Int         // מספר התא בלוקר (1,2,3...)
  code          String      @unique // קוד יחודי של התא
  name          String?     // שם התא (אופציונלי)
  size          String      // SMALL, MEDIUM, LARGE, WIDE
  status        CellStatus  @default(AVAILABLE)
  isLocked      Boolean     @default(true)
  isActive      Boolean     @default(true) // האם התא פעיל
  lockerId      Int
  locker        Locker      @relation(fields: [lockerId], references: [id])
  packages      Package[]
  cellState     CellState?
  lastOpenedAt  DateTime?   // מתי התא נפתח לאחרונה
  lastClosedAt  DateTime?   // מתי התא נסגר לאחרונה
  openCount     Int         @default(0) // מספר פתיחות
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@unique([lockerId, cellNumber]) // תא יחודי בלוקר
}

model Package {
  id            Int         @id @default(autoincrement())
  trackingCode  String      @unique
  customerId    Int
  customer      Customer    @relation(fields: [customerId], references: [id])
  courierId     Int
  courier       User        @relation(fields: [courierId], references: [id])
  size          String      // SMALL, MEDIUM, LARGE
  status        String      // WAITING, COLLECTED, EXPIRED
  lockerId      Int
  cellId        Int
  locker        Locker      @relation(fields: [lockerId], references: [id])
  cell          Cell        @relation(fields: [cellId], references: [id])
  delivery      Delivery?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Delivery {
  id            Int         @id @default(autoincrement())
  courierId     Int
  courier       User        @relation(fields: [courierId], references: [id])
  packageId     Int         @unique
  package       Package     @relation(fields: [packageId], references: [id])
  status        String      // PENDING, IN_PROGRESS, COMPLETED, FAILED
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// מודל לוגים ואודיט
model AuditLog {
  id          Int      @id @default(autoincrement())
  action      String   // "OPEN_CELL", "CLOSE_CELL", "LOGIN", "CREATE_PACKAGE"
  entityType  String   // "LOCKER", "CELL", "USER", "PACKAGE"
  entityId    String   // המזהה של הישות
  userId      Int?     // מי ביצע את הפעולה
  user        User?    @relation(fields: [userId], references: [id])
  details     Json?    // פרטים נוספים בפורמט JSON
  timestamp   DateTime @default(now())
  ipAddress   String?
  userAgent   String?
  success     Boolean  @default(true)
  errorMessage String?
  
  @@index([entityType, entityId])
  @@index([action])
  @@index([timestamp])
}

// מודל לתיעוד מצב אחרון של לוקרים
model LockerState {
  id                Int      @id @default(autoincrement())
  lockerId          Int      @unique
  locker            Locker   @relation(fields: [lockerId], references: [id])
  lastKnownStatus   String   // "ONLINE", "OFFLINE", "MAINTENANCE"
  lastCommunication DateTime?
  connectionRetries Int      @default(0)
  isResponding      Boolean  @default(false)
  lastCommand       String?  // פקודה אחרונה שנשלחה
  lastCommandTime   DateTime?
  lastCommandStatus String?  // "SUCCESS", "FAILED", "PENDING"
  metadata          Json?    // מידע נוסף
  updatedAt         DateTime @updatedAt
  createdAt         DateTime @default(now())
}

// מודל לתיעוד מצב אחרון של תאים
model CellState {
  id                Int      @id @default(autoincrement())
  cellId            Int      @unique
  cell              Cell     @relation(fields: [cellId], references: [id])
  lastKnownStatus   String   // "LOCKED", "UNLOCKED", "OPEN", "MAINTENANCE"
  physicallyLocked  Boolean? // האם התא נעול פיזית (לפי חיישן)
  lastOpenCommand   DateTime?
  lastCloseCommand  DateTime?
  lastSensorCheck   DateTime?
  commandInProgress String?  // "OPEN", "CLOSE", null
  retryCount        Int      @default(0)
  metadata          Json?
  updatedAt         DateTime @updatedAt
  createdAt         DateTime @default(now())
}
