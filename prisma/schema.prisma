// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  COURIER
  CUSTOMER
}

enum PackageStatus {
  PENDING     // ממתין לשליח
  IN_TRANSIT  // בדרך עם שליח
  IN_LOCKER   // בלוקר, ממתין לאיסוף
  DELIVERED   // נאסף על ידי הלקוח
  CANCELLED   // בוטל
}

enum DeliveryStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String
  role          Role      @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  receivedPackages Package[] @relation("RecipientPackages")
  deliveredPackages Package[] @relation("CourierDeliveries")
  deliveries      Delivery[] @relation("CourierDeliveries")
}

model Locker {
  id        String   @id @default(cuid())
  name      String
  location  String
  isOnline  Boolean  @default(false)
  ip        String
  port      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cells     Cell[]   @relation("LockerCells")
  packages  Package[] @relation("LockerPackages")
}

model Cell {
  id        String   @id @default(cuid())
  number    Int
  isLocked  Boolean  @default(true)
  isOpen    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  lockerId  String
  locker    Locker   @relation("LockerCells", fields: [lockerId], references: [id])
  packages  Package[] @relation("CellPackages")
}

model Package {
  id          String    @id @default(cuid())
  status      PackageStatus @default(PENDING)
  description String
  code        String?   // קוד לפתיחת התא
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  recipientId String    // מי אמור לקבל את החבילה
  recipient   User      @relation("RecipientPackages", fields: [recipientId], references: [id])
  
  courierId   String?   // מי השליח שמעביר את החבילה
  courier     User?     @relation("CourierDeliveries", fields: [courierId], references: [id])
  
  lockerId    String?   // באיזה לוקר נמצאת החבילה
  locker      Locker?   @relation("LockerPackages", fields: [lockerId], references: [id])
  
  cellId      String?   // באיזה תא בלוקר
  cell        Cell?     @relation("CellPackages", fields: [cellId], references: [id])

  delivery    Delivery? @relation("PackageDelivery")
}

model Delivery {
  id            String         @id @default(cuid())
  status        DeliveryStatus @default(PENDING)
  notes         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relations
  courierId     String
  courier       User          @relation("CourierDeliveries", fields: [courierId], references: [id])
  
  packageId     String        @unique
  package       Package       @relation("PackageDelivery", fields: [packageId], references: [id])
}
