// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  COURIER
  CUSTOMER_SERVICE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      String   @default("customer") // "admin" | "courier" | "customer"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id            Int         @id @default(autoincrement())
  email         String      @unique
  firstName     String
  lastName      String
  phone         String
  address       String?
  packages      Package[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum LockerStatus {
  ONLINE
  OFFLINE
  MAINTENANCE
}

enum CellStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  LOCKED
  UNLOCKED
}

model Locker {
  id        String   @id @default(cuid())
  lockerId  String   @unique
  ip        String
  port      Int
  status    String   @default("offline")
  lastSeen  DateTime @default(now())
  cells     Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cell {
  id            Int         @id @default(autoincrement())
  code          String      @unique
  size          String      // SMALL, MEDIUM, LARGE
  status        CellStatus  @default(AVAILABLE)
  isLocked      Boolean     @default(true)
  lockerId      Int
  locker        Locker      @relation(fields: [lockerId], references: [id])
  packages      Package[]
  lastOpenedAt  DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Package {
  id          String   @id @default(cuid())
  packageId   String   @unique
  status      String   @default("pending") // "pending" | "delivered" | "collected"
  lockerId    String?
  cellId      String?
  userId      String
  courierId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deliveredAt DateTime?
  collectedAt DateTime?
}

model Delivery {
  id            Int         @id @default(autoincrement())
  courierId     Int
  courier       User        @relation(fields: [courierId], references: [id])
  packageId     Int         @unique
  package       Package     @relation(fields: [packageId], references: [id])
  status        String      // PENDING, IN_PROGRESS, COMPLETED, FAILED
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
